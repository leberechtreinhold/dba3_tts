-- Given two tables with (x,y,z) or (x,z) numerical components,
-- computes the dot product of them
function vec_dot_product(vec1, vec2)
  local sum = 0
  for k,v1 in pairs(vec1) do
    local v2 = vec2[k]
    sum = sum + (v1 * v2)
  end
  return sum
end

-- Given two tables with (x,y,z) or (x,z) numerical components, computes the sum of both
function vec_add(vec1, vec2)
  local result = shallow_copy(vec1)
  for k,v in pairs(vec2) do
    result[k] = result[k] + vec2[k]
  end
  return result
end

-- helper for vec_add_n
-- gets the keys from a point and returns a new
-- vector with the value zero for each key.
function zero_vector_(point)
  local result = {}
  for key,_ in pairs(point) do
    result[key] = 0
  end
  return result
end

-- Add the values of a table, where the table contains points
function vec_add_n(points)
  a_point_key = get_any_key(points)
  a_point = points[a_point_key]
  local result = zero_vector_(a_point)
  for _,v in pairs(points) do
    result = vec_add(result, v)
  end
  return result
end

-- Given two tables with x,y,z numerical components, computes the vec1-vec2
function vec_sub(vec1, vec2)
    return { x = vec1['x'] - vec2['x'], y = vec1['y'] - vec2['y'], z = vec1['z'] - vec2['z'] }
end

-- Given a table with x,y,z numerical components, and a escalar number, returns a vector with each component multiplied
function vec_mul_escalar(vec, num)
    return { x = vec['x'] * num, y = vec['y'] * num, z = vec['z'] * num }
end

-- Given two tables with x,y,z numerical components, returns a vector
-- with each coomponent the multiplication of the two of the same value
function vec_mul_vec(vec, vec2)
    return { x = vec['x'] * vec2['x'], y = vec['y'] * vec2['y'], z = vec['z'] * vec2['z'] }
end

-- Given a table with (x,y) or (x,y,z) numerical components, and a escalar number, returns a vector with each component divided
function vec_div_escalar(vec, num)
  local result = {}
  for k,v in pairs(vec) do
    result[k] = vec[k] / num
  end
  return result
end

-- Given two tables with x,y,z numerical components, returns a vector
-- with each coomponent the divsion of the two of the same value
function vec_div_vec(vec, vec2)
    return { x = vec['x'] / vec2['x'], y = vec['y'] / vec2['y'], z = vec['z'] / vec2['z'] }
end

-- Given a table with x,y,z numerical components representing inches, return the same vector with each component being in mm
function vec_in_to_mm(vec)
    return { x = from_in_to_mm(vec['x']), y = from_in_to_mm(vec['y']), z = from_in_to_mm(vec['z']) }
end

-- Given a tables with x,y,z numerical components, returns a [x,y,z] string with two decimals of precision
function vec_to_str(vec)
    if vec == nil then
        return '[nil]'
    end
    return '[' .. string.format('%.2f',vec['x']) .. ', ' .. string.format('%.2f',vec['y']) .. ', ' .. string.format('%.2f',vec['z']) .. ']'
end

-- Given a tables with x,z numerical components, returns a [x,z] string with two decimals of precision
function vec_2d_to_str(vec)
    if vec == nil then
        return '[nil]'
    end
    return '[' .. string.format('%.2f',vec['x']) .. ', ' .. string.format('%.2f',vec['z']) .. ']'
end

-- Given two points represented by tables with x,z coords, determines the angle
-- in radains, of point B relative to A, taking into account the orientation
-- of A (in the Y axis) in radians
function relative_angle_from_point(pointA, pointB, rotationA)
    local zdiff = pointB['z'] - pointA['z']
    local xdiff = pointB['x'] - pointA['x']

    local relative_angle = math.atan2(zdiff, xdiff)
    if relative_angle < 0 then
        relative_angle = 2*math.pi + relative_angle
    end

    local angle_adjusted_coords = relative_angle + rotationA
    if angle_adjusted_coords > 2*math.pi then
        angle_adjusted_coords = angle_adjusted_coords - 2*math.pi
    end
    return angle_adjusted_coords
end

-- Normalize an angle between 0 and 360
function normalize_degrees(angle_degrees)
  while (angle_degrees < 0) do
    angle_degrees = angle_degrees + 360
  end
  while (angle_degrees >= 360) do
    angle_degrees = angle_degrees - 360
  end
  return angle_degrees
end


-- Normalize an angle between zero and 2 PI.
function normalize_radians(angle)
  while (angle < 0) do
    angle = angle + (math.pi * 2)
  end
  while (angle >= (math.pi * 2)) do
    angle = angle - (math.pi * 2)
  end
  return angle
end

-- Are two angles approximately the same.  Angles are measured in radians.
-- delta is the expected difference.
function is_rad_angle_diff(angleA, angleB, delta)
  -- normalize to be between 0 and 2 PI
  angleA = normalize_radians(angleA - delta) 
  angleB = normalize_radians(angleB) 
  local diff_angle = math.abs(angleA - angleB)
  -- Check if the difference
  if diff_angle < g_max_angle_pushback_rad then
    return true
  end

  -- Check if the value is close to 2 PI + threshold
  diff_angle =  (2 * math.pi)- diff_angle
  if diff_angle < g_max_angle_pushback_rad then
    return true
  end

  return false
end

-- Given a tables with x,y,z each with a degree number [0-360], returns a table with x,y,z converted to radians (o, 2pi)
function from_degrees_to_rad(vec)
    return { x = math.rad(vec['x']),  y = math.rad(vec['y']), z = math.rad(vec['z']) }
end

function from_in_to_mm(inches)
    return inches * 25.4
end

function from_mm_to_in(mm)
    return mm / 25.4
end

function from_bw_to_in(bw)
    return bw * g_base_width_inches
end

function from_in_to_bw(inches)
    return inches / g_base_width_inches
end

-- Given two tables with x,y,z representing world coords, calculates the distance between them in x,z, SQUARED
-- This is because we don't need the square root in most cases
function distance_points_flat_sq(point1, point2)
    return (point1['x'] - point2['x'])^2 + (point1['z'] - point2['z'])^2
end

-- Given two tables with x,y,z representing world coords, calculates the distance
-- between them in x,z
function distance_points_flat(point1, point2)
    return math.sqrt((point1['x'] - point2['x'])^2 + (point1['z'] - point2['z'])^2)
end

-- Given a number of radians (0, 2pi), returns a table with x,y,z components,
-- where y 0 is always 0 and x,z is the rotation value corresponding to those
-- radians, x being updown and z leftright
function rad_to_vector(radians)
    return { x = math.sin(radians), y = 0, z = math.cos(radians) }
end

-- Like the other rad_to_vector, with z up/down and x leftright
function rad_to_vector_xz(radians)
    return { x = math.cos(radians), y = 0, z = math.sin(radians) }
end

-- Angles in TTS can be pretty funny: the y axis defines the rotation from +x to
-- -y to -x to +y, which is pretty unintuitive, but I guess they wanted the
-- degrees to be clockwise instead of counterclockwise...
-- This makes them counterclockwise, x goes to -y to -x
function normalize_angle(angle)
    return 2*math.pi - angle
end

-- Given an angle in radians, returns a new angle in radians which is the same,
-- but between [0, 2*pi]. Only supports up to one rotation.
function positive_angle(angle)
    if angle < 0 then
        return angle + math.pi*2
    end
    if angle >= math.pi*2 then
        return angle - math.pi*2
    end
    return angle
end

-- Given a point with xyz coordinates, relative to the center, rotates along
-- theta
function rotate_point_relative(point, center_coordinates, theta)
    return {
        x = point['x'] * math.cos(theta) - point['z'] * math.sin(theta) + center_coordinates['x'],
        y = point['y'] + center_coordinates['y'],
        z = point['x'] * math.sin(theta) + point['z'] * math.cos(theta) + center_coordinates['z']
    }
end

-- Given a point with xyz coordinates, where xz form a plane, rotates using
-- an angle theta, respective to a coordinate system with xyz coordinates,
-- on that same plane
function rotate_point(point, center_coordinates, theta)
    local relative = vec_sub(point, center_coordinates)
    return rotate_point_relative(relative, center_coordinates, theta)
end

-- Given a table with four corners top/bot left/right, each with a xyz
-- vector representing coordinates in inches, returns the same table but
-- each coords is in mm
function corners_in_to_mm(corner)
    return {
        topright = vec_in_to_mm(corner['topright']),
        botright = vec_in_to_mm(corner['botright']),
        topleft  = vec_in_to_mm(corner['topleft']),
        botleft  = vec_in_to_mm(corner['botleft'])
    }
end


-- Given a table with four corners top/bot left/right, each with a xyz
-- vector representing coordinates, returns a str version of it
-- { corner = [coords], corner = [coords], ...}
function corners_to_str(corner)
    return '{' ..
        'topright=' .. vec_to_str(corner['topright']) .. ', ' ..
        'botright=' .. vec_to_str(corner['botright']) .. ', ' ..
        'topleft='  .. vec_to_str(corner['topleft'])  .. ', ' ..
        'botleft='  .. vec_to_str(corner['botleft']) .. '}'
end

function get_any_key(a_table)
  for k,_ in pairs(a_table) do
    return k
  end
end

-- Returns the minimum and maximum value of each ordinate.
-- n-dimensional bounding box
function bounding_box(corners)
  local k = get_any_key(corners)
  local min = shallow_copy(corners[k])
  local max = shallow_copy(corners[k])
  for i,corner in pairs(corners) do
    for k,v in pairs(corner) do
      min[k] = math.min(min[k], v)
      max[k] = math.max(max[k], v)
    end
  end
  return {min=min, max=max}
end


-- Is min <= v <= max?
function is_in_range(min,v,max)
  if v < min then
    return false
  end
  if v > max then
    return false
  end
  return true
end

function is_point_in_bounding_box(point, box)
  for k,v in pairs(point) do
    local min = box[ 'min' ] [ k ]
    local max = box[ 'max' ] [ k ]
    if not is_in_range(  min, v, max ) then
      return false
    end
  end
  return true
end

-- Do the two bounding boxes intersect each other?
function is_bounding_boxes_intersecting(box1, box2)
  for _,corner in pairs(box1) do
    if is_point_in_bounding_box(corner, box2) then
      return true
    end
  end
  return false
end

-- Calculate the mid-point of a shape.
-- The shape is a table of points.  Each point is a
-- vector of ordinate values.
function mid_point(shape)
  local sum = vec_add_n(shape)
  local result = vec_div_escalar(sum, #shape)
  return result
end

-- Check of a point is in a 2D triangle.
-- triangle is defined by three points for its vertices (x,z)
-- point to check is (x,z)
-- There may be false errors if the point is on the line or very close to
-- the line.
-- See http://totologic.blogspot.com/2014/01/accurate-point-in-triangle-test.html
-- 2nd method : parametric equations system
-- p is the point to check
-- v1, v2, v3 are the vertices of the triangle.
function is_point_in_2d_triangle(p, v1, v2, v3)
  local x1 = v1['x']
  local y1 = v1['z']
  local x2 = v2['x']
  local y2 = v2['z']
  local x3 = v3['x']
  local y3 = v3['z']
  local x = p['x']
  local y = p['z']

  local denominator = (x1*(y2 - y3) + y1*(x3 - x2) + x2*y3 - y2*x3)
  local t1 = (x*(y3 - y1) + y*(x1 - x3) - x1*y3 + y1*x3) / denominator
  local t2 = (x*(y2 - y1) + y*(x1 - x2) - x1*y2 + y1*x2) / -denominator
  local s = t1 + t2

  return 0 <= t1 and t1 <= 1 and 0 <= t2 and t2 <= 1 and s <= 1
end

function is_point_in_2d_shape(p, shape)
  if #shape == 4 then
    -- Use only two triangles instead of the generic algorithm
    -- that will use four.
    return is_point_in_2d_triangle(p, shape[1], shape[2], shape[3]) or
       is_point_in_2d_triangle(p, shape[3], shape[4], shape[1])
  end
  if #shape == 3 then
    return is_point_in_2d_triangle(p, shape[1], shape[2], shape[3])
  end
  -- Check triangles from two adjacent vertices to the mid-point
  local mid = mid_point(shape)
  local last
  for k,v in ipairs(shape) do
    if k ~= 1 then
      if is_point_in_2d_triangle(p, last, v, mid) then
        return true
      end
    end
    last = v
  end

  return is_point_in_2d_triangle(p, last, shape[1], mid)
 end

function is_2d_shapes_intersecting(shape1, shape2)
  for _,p in ipairs(shape2) do
    if is_point_in_2d_shape(p, shape1) then
      return true
    end
  end
  for _,p in ipairs(shape1) do
    if is_point_in_2d_shape(p, shape2) then
      return true
    end
  end
  return false
end

-- Helper function for find_ui_element
function find_ui_element_in_element(root_element, id)
    for k, v in pairs(root_element) do
        if k == 'attributes' then
            for kattr, vattr in pairs(v) do
                if kattr == 'id' and vattr == id then
                    return root_element
                end
            end
        end
        if k == 'children' then
            return find_ui_element_list(v, id)
        end
    end
    return nil
end

-- Helper function for find_ui_element
function find_ui_element_list(root_list, id)
    for i,element in ipairs(root_list) do
        local element = find_ui_element_in_element(element, id)
        if element ~= nil then
            return element
        end
    end
    return nil
end

-- Normally you can get the UI elements by using UI functions, but there are
-- things that are not retrieved in that data, like the options tags from the
-- XML in a dropdown. For those, this functions allows to get that info,
-- including all children.
-- This searches the full XML table, so it's perf intensive.
function find_ui_element(id)
    return find_ui_element_list(UI.getXmlTable(), id)
end

-- Given a dropdown element as returned by find_ui_element, returns a list of
-- the options. All options should have a value set.
function get_options_dropdown(dropdown_element)
    local list = {}
    local children = dropdown_element['children']
    if children == nil then
        return list
    end
    for i,option in ipairs(children) do
        list.insert(option['value'])
    end
end


-- Given a dropdown element as returned by find_ui_element, returns the
-- currently selected one
function get_option_selected_dropdown(dropdown_element)
    local children = dropdown_element['children']
    if children == nil then
        return nil
    end
    for i,option in ipairs(children) do
        if option['attributes'] ~= nil then
            if option['attributes']['selected'] == 'true' then
                return option['value']
            end
        end
    end
end

-- Given an id corresponding to an existing <Dropdown> element on the current
-- XML UI, returns the currently selected element.
-- This is because UI.getAttribute('dropdownid', 'text') doesn't work, despite
-- what the official docs say... it returns nil
-- NOTE It's perf intensive
function get_option_selected_dropdown_by_id(id)
    local element = find_ui_element(id)
    return get_option_selected_dropdown(element)
end

-- Given a dropdown element as returned by find_ui_element, changes the element
-- to contain the options desired.
-- NOTE This does NOT update the UI and should be used with find_ui_element
-- and setXmlTable()
function set_options_dropdown(dropdown_element, options, idx_selected)
    local children = dropdown_element['children']
    if children ~= nil then
        -- Delete all elements on the table but keep the reference
        local n = #children
        for i=0, n do children[i]=nil end
    end

    for i, option in ipairs(options) do
        local new_options = {
            tag = 'option',
            value = option
        }
        if i == idx_selected then
            new_options['attributes'] = {
                selected = true
            }
        end
        table.insert(children, i, new_options)
    end
end

-- Given an id corresponding to an existing <Dropdown> element on the current
-- XML UI, edits the options to those given.
-- The list of options should be a plain array of strings
-- The index (1 to n) represent which one is currently selected.
-- This is perf intensive, beware. It's also not updated until the next frame.
function set_options_dropdown_by_id(id,  options, idx_selected)
    local xml = UI.getXmlTable()
    local element = find_ui_element_list(xml, id)
    set_options_dropdown(element, options, idx_selected)
    UI.setXmlTable(xml)
end

function dataname_to_friendlyname(dataname)
    local friendly_name,_ = dataname:gsub('_', ' ')
    return friendly_name
end

function friendlyname_to_dataname(friendly_name)
    local dataname,_ = friendly_name:gsub(' ', '_')
    return dataname
end

-- Given a position for a center,  gets the coordinates of circle on the XZ plane
function get_coordinates_circle(center, radius, steps)
    local point_array = {}
    local degrees_per_step = 360 / steps
    local radians_per_step = math.rad(degrees_per_step)
    for i = 0, steps do
        local p = {
            x = center['x'] + math.cos(radians_per_step * i) * radius,
            y = center['y'],
            z = center['z'] + math.sin(radians_per_step * i) * radius
        }
        table.insert(point_array, p)
    end
    return point_array
end

function get_coordinates_arc(center, radius, steps, start_angle, finish_angle)
    local point_array = {}
    local degrees_per_step = (finish_angle - start_angle) / steps
    local radians_per_step = math.rad(degrees_per_step)
    local initial_radians = math.rad(start_angle)
    for i = 0, steps do
        local p = {
            x = center['x'] + math.cos(radians_per_step * i + initial_radians) * radius,
            y = center['y'],
            z = center['z'] + math.sin(radians_per_step * i + initial_radians) * radius
        }
        table.insert(point_array, p)
    end
    return point_array
end


-- Gives a random angle between -pi/2-pi/2 for a ellipse
function random_polar_angle_ellipse(w,h)
    local u = math.random() / 4.0
    local theta = math.atan(h/w * math.tan(2*math.pi*u))

    local v = math.random()
    if v < 0.25 then
        return theta
    end
    if v < 0.5 then
        return math.pi - theta
    end
    if v < 0.75 then
        return math.pi + theta
    end
    return -theta
end

function get_radius_ellipse(w,h,theta)
    return w * h / math.sqrt((h*math.cos(theta))^2 + (w*math.sin(theta))^2)
end

-- https://stackoverflow.com/questions/5529148/algorithm-calculate-pseudo-random-point-inside-an-ellipse
function random_point_ellipse(w, h, added_from_center)
    local random_theta = random_polar_angle_ellipse(w, h)
    local max_radius = get_radius_ellipse(w, h, random_theta)
    local random_radius = max_radius * math.sqrt(math.random())
    if added_from_center ~= nil then
        random_radius = random_radius + added_from_center
    end

    return {
        x = random_radius * math.cos(random_theta),
        y = 0,
        z = random_radius * math.sin(random_theta)
    }
end

function table_length(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function is_vec_3d(obj)
  if type(obj) ~= "table" then
    return false
  end
  if table_length(obj) ~= 3 then
    return false
  end
  if obj['x'] == nil then
    return false
  end
  if obj['y'] == nil then
    return false
  end
  if obj['z'] == nil then
    return false
  end
  return true
end

function is_vec_2d(obj)
  if type(obj) ~= "table" then
    return false
  end
  if table_length(obj) ~= 3 then
    return false
  end
  if obj['x'] == nil then
    return false
  end
  if obj['z'] == nil then
    return false
  end
  return true
end

function is_corners(obj)
  if type(obj) ~= "table" then
    return false
  end
  if table_length(obj) ~= 4 then
    return false
  end
  if obj['topleft'] == nil then
    return false
  end
  if obj['topright'] == nil then
    return false
  end
  if obj['botleft'] == nil then
    return false
  end
  if obj['botright'] == nil then
    return false
  end
  return true
end

-- Print contents of `tbl`, with indentation.
-- `indent` sets the initial level of indentation.
function table_print (tbl, indent)
  if not indent then indent = 0 end
  for k, v in pairs(tbl) do
    formatting = string.rep("  ", indent) .. k .. ": "
    if is_vec_2d(v) then
      print(formatting .. vec_2d_to_str(v))
    elseif is_vec_3d(v) then
      print(formatting .. vec_to_str(v))
    elseif is_corners(v) then
      print(formatting .. corners_to_str(v))
    elseif type(v) == "table" then
      print(formatting)
      table_print(v, indent+1)
    else
      print(formatting .. tostring(v))
    end
  end
end
