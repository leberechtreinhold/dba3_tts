-- In the global file of your game, simply add this line
-- #include main
-- Then, in Atom package settings, go to the TTS package and define the path
-- to this folder. Since this main file already includes the others no further
-- operation is required for scripts. The XML needs to be copied manually
-- however.

#include scripts/utilities_lua
-- shallow_copy and deep_copy are needed by data_cheat_sheet
#include scripts/data/data_cheat_sheet

#include scripts/data/data_settings
#include scripts/data/data_tables
#include scripts/data/data_terrain
#include scripts/data/data_troops
#include scripts/data/data_troops_greek_successors
#include scripts/data/data_armies_book_I
#include scripts/data/data_armies_book_II
#include scripts/data/data_armies_book_III
#include scripts/data/data_armies_book_IV
#include scripts/base_cache
#include scripts/log
#include scripts/utilities
#include scripts/logic_terrain
#include scripts/logic_gizmos
#include scripts/logic_spawn_army
#include scripts/logic_dead
#include scripts/logic_dice
#include scripts/logic_history_stack
#include scripts/logic_tool_tips
#include scripts/logic
#include scripts/uievents

function onSave()
  -- building locations
  local lots = {}
  for _,obj in pairs( getAllObjects()) do
    if is_building_zone(obj) then
      lots[ obj.getGUID()] = obj.getTable("bua_lot")
    end
  end
  local extra = {}
  extra['building_lots'] = lots
  local saved_data = JSON.encode(extra)
  return saved_data
end


function onload(saved_data)
    print_info('----------------------------------------------')
    print_info('                       DBA 3.0 v1.22 ')
    print_info('----------------------------------------------\n\nCheck the Notebook for instructions.')
    Wait.time(main_loop, g_seconds_main_loop, -1)
    make_scenery_non_interactable()
    reset_state()
    spawn_proxy_bases()
    spawn_all_dice()
    spawn_dead_zones()
    restore_zone_callbacks()
    restore_extra_data(saved_data)
    print_tool_tip_status()
end

function restore_extra_data(saved_data)
  if saved_data == nil then
    return
  end
  local extra = JSON.decode(saved_data)
  if extra == nil then
    return
  end
  if type(extra) ~= 'table' then
    return
  end
  local lots = extra['building_lots']
  if lots == nil then
    print_info('No BUA lots found')
    return
  end
  for guid,table in pairs(lots) do
    local zone = getObjectFromGUID(guid)
    if zone == nil then
      print_error("BUA Zone not found: " .. tostring(guid))
    else
      zone.setTable('bua_lot', table)
    end
  end
end


-- Set the callbacks for zones
function restore_zone_callbacks()
  for _,obj in pairs( getAllObjects()) do
    if is_building_zone(obj) then
      setZoneBuaCallback(obj)
    elseif is_dead_zone(obj) then
      setZoneDeadCallback(obj)
    end
  end
end

function make_scenery_non_interactable()
    -- Main table
    getObjectFromGUID('558717').interactable = false

    -- Chairs
    getObjectFromGUID('e149a5').interactable = false
    getObjectFromGUID('daff99').interactable = false

    -- Floor
    getObjectFromGUID('83a7b8').interactable = false

    -- Walls
    getObjectFromGUID('77e020').interactable = false
    getObjectFromGUID('6880f1').interactable = false
    getObjectFromGUID('a2475b').interactable = false
    getObjectFromGUID('0d0857').interactable = false

    -- Main point light
    getObjectFromGUID('c0f8eb').interactable = false

    -- Key light
    getObjectFromGUID('4a9adf').interactable = false

    -- Back lights
    getObjectFromGUID('3b5c97').interactable = false
    getObjectFromGUID('018fac').interactable = false

    -- Top light for shadows
    getObjectFromGUID('bc09bc').interactable = false
end

function update()
    check_picked_base()
end

function print_help()
    print_info('Write commands in the chat by writting !command.')
    print_info('A extended description can be found on the Notebook.')
    print_info('Available commands:')
    print_info('!dba_help: Print this help')
    print_info('!dba_print_state: Prints the current global vars of bases and table')
    print_info('!dba_reset: Recalculates the bases and tables using heuristics on the existing objects')
end

function onChat(message, player)
    if message == '!dba_help' then
        print_info(player.get_steam_name() .. ': ' .. message)
        print_help()
        return false
    end

    if message == '!dba_reset' then
        print_info(player.get_steam_name() .. ': ' .. message)
        print_important('Resetting the state of the board, check the chat')
        reset_state()
        return false
    end

    if message == '!dba_print_state' then
        print_info(player.get_steam_name() .. ': ' .. message)
        print_state()
        return false
    end

    if message == '!dba_debug' then
        print_info(player.get_steam_name() .. ': ' .. message)
        if g_debug_mode then
            print_info('Disabling debug mode')
            g_debug_mode = false
        else
            print_info('Enabling debug mode, will take effect in three seconds. Note, this will cause decreased performance.')
            Wait.time(function()
                g_debug_mode = true
                print_info('Debug mode ON')
            end, 3)
        end
        return false
    end

    if message == '!dba_3dterrain' then
        print_info(player.get_steam_name() .. ': ' .. message)
        g_use_3d_terrain = true
        print_info('3D Terrain enabled, when doing a fix&lock on the table 3D objects will load.')
        return false
    end

    if message == '!dba_regen_dice' then
        print_info(player.get_steam_name() .. ': ' .. message)
        spawn_all_dice()
        return false
    end

    if message == '!dba_random_army' then
        print_info(player.get_steam_name() .. ': ' .. message)
        local _,book = random_kv(armies)
        local army_name, army = random_kv(book)

        print_important('Army selected: ' .. army_name .. '')
        print_info('List: ' .. army['data']['list'])
        print_info('Agressiveness: ' .. army['data']['aggresiveness']
            .. ' Terrain: ' .. army['data']['terrain'])
        return false
    end

    if str_starts_with(message, '!dba') then
        print_info(player.get_steam_name() .. ': ' .. message)
        print_error('Command not recognized. Please, use !dba_help')
    end
    return true
end
